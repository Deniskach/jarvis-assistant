"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
"""
try:
    import pyttsx3
    print("‚úÖ pyttsx3 –∑–∞–≥—Ä—É–∂–µ–Ω")
    HAS_TTS = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ pyttsx3: {e}")
    HAS_TTS = False

class SimpleSpeechSynthesizer:
    def __init__(self):
        self.has_tts = HAS_TTS
        self.engine = None
        self.voice_settings = {
            'rate': 180,        # –°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ (—Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É)
            'volume': 0.9,      # –ì—Ä–æ–º–∫–æ—Å—Ç—å (0.0 - 1.0)
            'voice_id': None,   # ID –≥–æ–ª–æ—Å–∞ (–∞–≤—Ç–æ–≤—ã–±–æ—Ä —Ä—É—Å—Å–∫–æ–≥–æ)
            'pitch': 50         # –í—ã—Å–æ—Ç–∞ —Ç–æ–Ω–∞ (–Ω–µ –≤–µ–∑–¥–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        }
        
        if self.has_tts:
            try:
                self.engine = pyttsx3.init()
                self.setup_voice()
                print("‚úÖ –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä —Ä–µ—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {e}")
                self.has_tts = False
        else:
            print("‚ö†Ô∏è  TTS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

    def setup_voice(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–µ—á–∏"""
        if not self.engine:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤
        voices = self.engine.getProperty('voices')
        
        # –ò—â–µ–º —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
        russian_voices = []
        english_voices = []
        
        for voice in voices:
            if 'russian' in voice.name.lower() or 'russian' in voice.id.lower():
                russian_voices.append(voice)
            elif 'english' in voice.name.lower() or 'english' in voice.id.lower():
                english_voices.append(voice)
        
        # –í—ã–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É: —Ä—É—Å—Å–∫–∏–π ‚Üí –∞–Ω–≥–ª–∏–π—Å–∫–∏–π ‚Üí –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        if russian_voices:
            selected_voice = russian_voices[0]
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å: {selected_voice.name}")
        elif english_voices:
            selected_voice = english_voices[0] 
            print(f"‚ö†Ô∏è  –†—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–Ω–≥–ª–∏–π—Å–∫–∏–π: {selected_voice.name}")
        else:
            selected_voice = voices[0] if voices else None
            print(f"‚ö†Ô∏è  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {selected_voice.name if selected_voice else '–ù–µ –Ω–∞–π–¥–µ–Ω'}")
        
        if selected_voice:
            self.engine.setProperty('voice', selected_voice.id)
            self.voice_settings['voice_id'] = selected_voice.id
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        self.engine.setProperty('rate', self.voice_settings['rate'])
        self.engine.setProperty('volume', self.voice_settings['volume'])

    
    def change_voice_speed(self, speed):
        """–ò–∑–º–µ–Ω—è–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏"""
        if not self.engine:
            return "–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä —Ä–µ—á–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Å–∫–æ—Ä–æ—Å—Ç–∏
        speed = max(50, min(300, speed))  # 50-300 —Å–ª–æ–≤ –≤ –º–∏–Ω—É—Ç—É
        self.voice_settings['rate'] = speed
        self.engine.setProperty('rate', speed)
        return f"–°–∫–æ—Ä–æ—Å—Ç—å —Ä–µ—á–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {speed}"
    

    def change_volume(self, volume):
        """–ò–∑–º–µ–Ω—è–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç—å"""
        if not self.engine:
            return "–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä —Ä–µ—á–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        volume = max(0.1, min(1.0, volume))  # 0.1-1.0
        self.voice_settings['volume'] = volume
        self.engine.setProperty('volume', volume)
        return f"–ì—Ä–æ–º–∫–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {int(volume * 100)}%"
    

    def list_available_voices(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ–ª–æ—Å–æ–≤"""
        if not self.engine:
            return "–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä —Ä–µ—á–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        voices = self.engine.getProperty('voices')
        result = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞:\n"
        
        for i, voice in enumerate(voices):
            language = "—Ä—É—Å—Å–∫–∏–π" if 'russian' in voice.name.lower() else "–∞–Ω–≥–ª–∏–π—Å–∫–∏–π" if 'english' in voice.name.lower() else "–¥—Ä—É–≥–æ–π"
            current = " (—Ç–µ–∫—É—â–∏–π)" if voice.id == self.voice_settings['voice_id'] else ""
            result += f"{i+1}. {voice.name} ({language}){current}\n"
        
        return result
    

    def set_voice(self, voice_index):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if not self.engine:
            return "–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä —Ä–µ—á–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        voices = self.engine.getProperty('voices')
        if 0 <= voice_index < len(voices):
            self.engine.setProperty('voice', voices[voice_index].id)
            self.voice_settings['voice_id'] = voices[voice_index].id
            return f"–ì–æ–ª–æ—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {voices[voice_index].name}"
        else:
            return f"–ì–æ–ª–æ—Å —Å –∏–Ω–¥–µ–∫—Å–æ–º {voice_index} –Ω–µ –Ω–∞–π–¥–µ–Ω"
        

    def get_voice_settings(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞"""
        return f"""
–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ–ª–æ—Å–∞:
‚Ä¢ –°–∫–æ—Ä–æ—Å—Ç—å: {self.voice_settings['rate']} —Å–ª–æ–≤/–º–∏–Ω
‚Ä¢ –ì—Ä–æ–º–∫–æ—Å—Ç—å: {int(self.voice_settings['volume'] * 100)}%
‚Ä¢ –ì–æ–ª–æ—Å: {self.get_current_voice_name()}
"""
    

    def get_current_voice_name(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–ª–æ—Å–∞"""
        if not self.engine or not self.voice_settings['voice_id']:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        
        voices = self.engine.getProperty('voices')
        for voice in voices:
            if voice.id == self.voice_settings['voice_id']:
                return voice.name
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    
    def speak(self, text):
        """–ü—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç —Ç–µ–∫—Å—Ç"""
        print(f"ü§ñ Jarvis: {text}")
        
        if self.has_tts:
            try:
                self.engine.say(text)
                self.engine.runAndWait()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")