"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏
"""
try:
    import pyttsx3
    print("‚úÖ pyttsx3 –∑–∞–≥—Ä—É–∂–µ–Ω")
    HAS_TTS = True
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ pyttsx3: {e}")
    HAS_TTS = False

class SimpleSpeechSynthesizer:
    def __init__(self):
        self.has_tts = HAS_TTS
        
        if self.has_tts:
            try:
                self.engine = pyttsx3.init()
                
                # –ë–∞–∑–æ–≤–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–æ–ª–æ—Å–∞
                voices = self.engine.getProperty('voices')
                if voices:
                    # –ò—â–µ–º —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å
                    for voice in voices:
                        if 'russian' in voice.name.lower() or 'russian' in voice.id.lower():
                            self.engine.setProperty('voice', voice.id)
                            print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä—É—Å—Å–∫–∏–π –≥–æ–ª–æ—Å: {voice.name}")
                            break
                    else:
                        self.engine.setProperty('voice', voices[0].id)
                        print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {voices[0].name}")
                
                self.engine.setProperty('rate', 150)
                self.engine.setProperty('volume', 0.8)
                print("‚úÖ –°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä —Ä–µ—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS: {e}")
                self.has_tts = False
        else:
            print("‚ö†Ô∏è  TTS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def speak(self, text):
        """–ü—Ä–æ–∏–∑–Ω–æ—Å–∏—Ç —Ç–µ–∫—Å—Ç"""
        print(f"ü§ñ Jarvis: {text}")
        
        if self.has_tts:
            try:
                self.engine.say(text)
                self.engine.runAndWait()
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: {e}")