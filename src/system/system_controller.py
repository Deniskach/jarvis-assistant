"""
–ú–æ–¥—É–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞
"""
import os
import platform
import subprocess
import psutil
import pyautogui

class SystemController:
    def __init__(self):
        self.os_type = platform.system()
        print(f"‚úÖ SystemController –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è {self.os_type}")
    
    def open_program(self, program_name):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ –∏–º–µ–Ω–∏"""
        programs = {
            '–±—Ä–∞—É–∑–µ—Ä': 'browser',
            '–±–ª–æ–∫–Ω–æ—Ç': 'notepad',
            '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä': 'calc',
            '–ø—Ä–æ–≤–æ–¥–Ω–∏–∫': 'explorer',
            '—Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä': 'winword',
            '—Ç–∞–±–ª–∏—Ü—ã': 'excel',
            '–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è': 'control',
            '–¥–∏—Å–ø–µ—Ç—á–µ—Ä –∑–∞–¥–∞—á': 'taskmgr'
        }

        alternative_paths = {
        'browser': [
            r"C:\Program Files (x86)\Yandex\YandexBrowser\Application\browser.exe"
        ],
        'winword': [
            r"C:\Program Files (x86)\Microsoft Office\Office14\WINWORD.EXE"
        ],
        'excel': [
            r"C:\Program Files (x86)\Microsoft Office\Office14\EXCEL.EXE"
        ]
    }
        
        program_key = program_name.lower()
        if program_key in programs:
            program_command = programs[program_key]
        
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
            if program_command in alternative_paths:
                for path in alternative_paths[program_command]:
                    if os.path.exists(path):
                        try:
                            subprocess.Popen([path])
                            return f"–û—Ç–∫—Ä—ã–≤–∞—é {program_name}"
                        except Exception as e:
                            continue
            
            # –ï—Å–ª–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É
            try:
                # –î–ª—è –∫–æ–º–∞–Ω–¥ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ –≤ PATH, –∏—Å–ø–æ–ª—å–∑—É–µ–º shell=True
                if program_command in ['browser', 'winword', 'excel']:
                    # –≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã –º–æ–≥—É—Ç –Ω–µ –±—ã—Ç—å –≤ PATH, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ shell
                    result = subprocess.run(f'start "" "{program_command}"', shell=True, 
                                        capture_output=True, text=True, timeout=5)
                    if result.returncode == 0:
                        return f"–û—Ç–∫—Ä—ã–≤–∞—é {program_name}"
                    else:
                        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å {program_name}. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
                else:
                    # –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ–≥–¥–∞ –≤ PATH
                    subprocess.Popen(program_command, shell=True)
                    return f"–û—Ç–∫—Ä—ã–≤–∞—é {program_name}"
                    
            except subprocess.TimeoutExpired:
                return f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ {program_name}"
            except Exception as e:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ {program_name}: {e}"
                
        else:
            return f"–ù–µ –∑–Ω–∞—é –∫–∞–∫ –æ—Ç–∫—Ä—ã—Ç—å {program_name}"
    
    def get_system_info(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
        try:
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
            memory = psutil.virtual_memory()
            memory_used = round(memory.used / (1024**3), 1)  # GB
            memory_total = round(memory.total / (1024**3), 1)  # GB
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ
            cpu_percent = psutil.cpu_percent(interval=1)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞—Ç–∞—Ä–µ–µ (–¥–ª—è –Ω–æ—É—Ç–±—É–∫–æ–≤)
            battery = None
            if hasattr(psutil, "sensors_battery"):
                battery = psutil.sensors_battery()
            
            info = f"""
üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:
‚Ä¢ –ü–∞–º—è—Ç—å: {memory_used}GB / {memory_total}GB ({memory.percent}%)
‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {cpu_percent}% –∑–∞–≥—Ä—É–∂–µ–Ω
"""
            
            if battery:
                info += f"‚Ä¢ –ë–∞—Ç–∞—Ä–µ—è: {battery.percent}%"
                if battery.power_plugged:
                    info += " (–∑–∞—Ä—è–∂–∞–µ—Ç—Å—è)"
            
            return info.strip()
            
        except Exception as e:
            return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ: {e}"
    
    def volume_control(self, action):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç—å—é"""
        try:
            if action == '–≥—Ä–æ–º—á–µ':
                for _ in range(5):
                    pyautogui.press('volumeup')
                return "–£–≤–µ–ª–∏—á–∏–≤–∞—é –≥—Ä–æ–º–∫–æ—Å—Ç—å"
            elif action == '—Ç–∏—à–µ':
                for _ in range(5):
                    pyautogui.press('volumedown')
                return "–£–º–µ–Ω—å—à–∞—é –≥—Ä–æ–º–∫–æ—Å—Ç—å"
            elif action == '–≤—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫' or action == '–≤–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫':
                pyautogui.press('volumemute')
                return "–ü–µ—Ä–µ–∫–ª—é—á–∞—é –∑–≤—É–∫"
            else:
                return "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É –≥—Ä–æ–º–∫–æ—Å—Ç–∏"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥—Ä–æ–º–∫–æ—Å—Ç—å—é: {e}"
    
    def computer_control(self, action):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º"""
        try:
            if action == '—Å–ø–∞—Ç—å':
                os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")
                return "–ü–µ—Ä–µ–≤–æ–∂—É –∫–æ–º–ø—å—é—Ç–µ—Ä –≤ —Å–ø—è—â–∏–π —Ä–µ–∂–∏–º"
            elif action == '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞':
                os.system("shutdown /r /t 5")
                return "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥"
            elif action == '–≤—ã–∫–ª—é—á–µ–Ω–∏–µ':
                os.system("shutdown /s /t 5")
                return "–í—ã–∫–ª—é—á–∞—é –∫–æ–º–ø—å—é—Ç–µ—Ä —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥"
            else:
                return "–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º: {e}"
    
    def take_screenshot(self):
        try:
            # –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–æ—Å–æ–±: MSS
            import mss
            from datetime import datetime
            import os

            pictures_dir = os.path.join(os.path.expanduser("~"), "Pictures")

            with mss.mss() as sct:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"screenshot_{timestamp}.png"
                full_path = os.path.join(pictures_dir, filename)
                sct.shot(output=full_path)
                return "–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
            
        except ImportError:
            try:
                # –†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: pyscreeze (–µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
                import pyscreeze
                from datetime import datetime
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"screenshot_{timestamp}.png"
                screenshot = pyscreeze.screenshot()
                screenshot.save(filename)
                return "–°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω"
            except Exception:
                return "–î–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install mss"
        except Exception as e:
            return f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}"