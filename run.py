import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

print("üöÄ –ó–∞–ø—É—Å–∫ –î–∂–∞—Ä–≤–∏—Å–∞...")

try:
    from src.voice.stt import VoskSpeechRecognizer as SpeechRecognizer
    from src.voice.tts import SimpleSpeechSynthesizer as SpeechSynthesizer
    from src.system.system_controller import SystemController
    print("‚úÖ –ú–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    
    class Jarvis:
        def __init__(self):
            self.stt = SpeechRecognizer()
            self.tts = SpeechSynthesizer()
            self.system = SystemController()
            
        def process_command(self, text):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã"""
            text_lower = text.lower()
            
            # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if any(word in text_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π']):
                self.tts.speak("–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?")
            
            elif '–≤—Ä–µ–º—è' in text_lower:
                from datetime import datetime
                current_time = datetime.now().strftime("%H:%M")
                self.tts.speak(f"–°–µ–π—á–∞—Å {current_time}")
            
            elif '–¥–∞—Ç–∞' in text_lower:
                from datetime import datetime
                current_date = datetime.now().strftime("%d %B %Y")
                self.tts.speak(f"–°–µ–≥–æ–¥–Ω—è {current_date}")
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            elif any(word in text_lower for word in ['–æ—Ç–∫—Ä–æ–π', '–∑–∞–ø—É—Å—Ç–∏']):
                program = text_lower.replace('–æ—Ç–∫—Ä–æ–π', '').replace('–∑–∞–ø—É—Å—Ç–∏', '').strip()
                response = self.system.open_program(program)
                self.tts.speak(response)
            
            elif '—Å–∏—Å—Ç–µ–º–∞' in text_lower or '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ' in text_lower:
                response = self.system.get_system_info()
                self.tts.speak(response)
            
            elif any(word in text_lower for word in ['–≥—Ä–æ–º—á–µ', '—Ç–∏—à–µ', '–≤—ã–∫–ª—é—á–∏ –∑–≤—É–∫', '–≤–∫–ª—é—á–∏ –∑–≤—É–∫']):
                if '–≥—Ä–æ–º—á–µ' in text_lower:
                    action = '–≥—Ä–æ–º—á–µ'
                elif '—Ç–∏—à–µ' in text_lower:
                    action = '—Ç–∏—à–µ'
                elif '–≤—ã–∫–ª—é—á–∏ –∑–≤—É–∫' in text_lower:
                    action = '–≤—ã–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫'
                else:
                    action = '–≤–∫–ª—é—á–∏—Ç—å –∑–≤—É–∫'

                response = self.system.volume_control(action)
                self.tts.speak(response)
            
            elif any(word in text_lower for word in ['—Å–ø–∞—Ç—å', '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞', '–≤—ã–∫–ª—é—á–µ–Ω–∏–µ']):
                if '—Å–ø–∞—Ç—å' in text_lower:
                    action = '—Å–ø–∞—Ç—å'
                elif '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞' in text_lower:
                    action = '–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞'
                else:
                    action = '–≤—ã–∫–ª—é—á–µ–Ω–∏–µ'
                response = self.system.computer_control(action)
                self.tts.speak(response)
            
            elif '—Å–∫—Ä–∏–Ω—à–æ—Ç' in text_lower:
                response = self.system.take_screenshot()
                self.tts.speak(response)
            
            elif any(word in text_lower for word in ['—Å—Ç–æ–ø', '–≤—ã—Ö–æ–¥']):
                self.tts.speak("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                return False  # —Å–∏–≥–Ω–∞–ª –¥–ª—è –≤—ã—Ö–æ–¥–∞
            
            else:
                self.tts.speak("–ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É")
            return True
            
        def run(self):
            """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª"""
            self.tts.speak("–î–∂–∞—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω. –ì–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã.")
            print("\n" + "="*60)
            print("üéØ –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´:")
            print("‚Ä¢ –ë–∞–∑–æ–≤—ã–µ: –ø—Ä–∏–≤–µ—Ç, –≤—Ä–µ–º—è, –¥–∞—Ç–∞")
            print("‚Ä¢ –°–∏—Å—Ç–µ–º–∞: –æ—Ç–∫—Ä–æ–π –±—Ä–∞—É–∑–µ—Ä, –æ—Ç–∫—Ä–æ–π –±–ª–æ–∫–Ω–æ—Ç")
            print("‚Ä¢ –ì—Ä–æ–º–∫–æ—Å—Ç—å: –≥—Ä–æ–º—á–µ, —Ç–∏—à–µ, –≤—ã–∫–ª—é—á–∏ –∑–≤—É–∫, –≤–∫–ª—é—á–∏ –∑–≤—É–∫") 
            print("‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: —Å–ø–∞—Ç—å, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞, –≤—ã–∫–ª—é—á–µ–Ω–∏–µ")
            print("‚Ä¢ –î—Ä—É–≥–æ–µ: —Å–∫—Ä–∏–Ω—à–æ—Ç, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
            print("‚Ä¢ –í—ã—Ö–æ–¥: —Å—Ç–æ–ø, –≤—ã—Ö–æ–¥")
            print("="*60 + "\n")
            
            while True:
                text = self.stt.recognize()
                if text and not self.process_command(text):
                    break
                    
    # –ó–∞–ø—É—Å–∫
    jarvis = Jarvis()
    jarvis.run()
    
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    import traceback
    traceback.print_exc()

print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–æ.")